class CPU {							class CPU {
    constructor(renderer, keyboard, speaker){		      |		constructor(renderer, keyboard, speaker) {
        this.renderer = renderer;			      |			this.renderer = renderer;
        this.keyboard = keyboard;			      |			this.keyboard = keyboard;
        this.speaker  = speaker;			      |			this.speaker = speaker;
							      <
        this.memory     = new Uint8Array(4 * 1024);	      <
        this.registers  = new Uint8Array(16);		      <
        this.pc         = 0x200;			      <
        this.index      = 0;				      <
        this.stack      = new Array();			      <
        this.timerDelay = 0;				      <
        this.timerSound = 0;				      <

        this.paused     = false;			      |			// 4KB (4096 bytes) of memory
        this.speed      = 10;				      |			this.memory = new Uint8Array(4096);
    }							      |
							      >			// 16 8-bit registers
							      >			this.v = new Uint8Array(16);
							      >
							      >			// Stores memory addresses. Set this to 0 sin
							      >			this.i = 0;
							      >
							      >			// Timers
							      >			this.delayTimer = 0;
							      >			this.soundTimer = 0;

							      >			// Program counter. Stores the currently exec
							      >			this.pc = 0x200;
							      >
							      >			// Don't initialize this with a size in order
							      >			this.stack = new Array();
							      >
							      >			// Some instructions require pausing, such as
							      >			this.paused = false;
							      >
							      >			this.speed = 10;
							      >	    }
							      >	    
    loadSpritesIntoMemory() {					    loadSpritesIntoMemory() {
        // Array of hex values for each sprite. Each sprite i	        // Array of hex values for each sprite. Each sprite i
        // The technical reference provides us with each one 	        // The technical reference provides us with each one 
        const sprites = [					        const sprites = [
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0			            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1			            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2			            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3			            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4			            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5			            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6			            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7			            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8			            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9			            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A			            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B			            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C			            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D			            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E			            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F			            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        ];							        ];
							      |	    
        // According to the technical reference, sprites are  |	        // According to the technical reference, sprites are 
        // stored in the interpreter section of memory starti <
        for (let i = 0; i < sprites.length; i++) {		        for (let i = 0; i < sprites.length; i++) {
            this.memory[i] = sprites[i];			            this.memory[i] = sprites[i];
        }							        }
    }								    }

    loadProgramIntoMemory(program) {				    loadProgramIntoMemory(program) {
        for (let location = 0; location < program.length; loc |	        for (let loc = 0; loc < program.length; loc++) {
            this.memory[0x200 + location] = program[location] |	            this.memory[0x200 + loc] = program[loc];
        }							        }
    }								    }

    loadRom(romName) {						    loadRom(romName) {
        var request = new XMLHttpRequest;			        var request = new XMLHttpRequest;
        var self = this;					        var self = this;
							      |	    
        // Handles the response received from sending (reques	        // Handles the response received from sending (reques
        request.onload = function() {				        request.onload = function() {
            // If the request response has content		            // If the request response has content
            if (request.response) {				            if (request.response) {
                // Store the contents of the response in an 8	                // Store the contents of the response in an 8
                let program = new Uint8Array(request.response	                let program = new Uint8Array(request.response
							      |	    
                // Load the ROM/program into memory		                // Load the ROM/program into memory
                self.loadProgramIntoMemory(program);		                self.loadProgramIntoMemory(program);
            }							            }
        }							        }
							      |	    
        // Initialize a GET request to retrieve the ROM from 	        // Initialize a GET request to retrieve the ROM from 
        request.open('GET', 'roms/' + romName);			        request.open('GET', 'roms/' + romName);
        request.responseType = 'arraybuffer';			        request.responseType = 'arraybuffer';
							      |	    
        // Send the GET request					        // Send the GET request
        request.send();						        request.send();
    }								    }

    cycle(){						      |	    cycle() {
        for (let i = 0; i<this.speed; i++) {		      |	        for (let i = 0; i < this.speed; i++) {
            if(!this.paused){				      |	            if (!this.paused) {
                let opcode = (this.memory[this.pc] << 8 | thi	                let opcode = (this.memory[this.pc] << 8 | thi
                // console.log("Gonna execute 0x" + opcode.to <
                this.executeInstruction(opcode);		                this.executeInstruction(opcode);
            }							            }
        }							        }

        if (!this.paused) {					        if (!this.paused) {
            this.updateTimers();				            this.updateTimers();
        }							        }
							      >	    
        this.playSound();					        this.playSound();
        this.renderer.render();					        this.renderer.render();
    }								    }

    updateTimers() {						    updateTimers() {
        if (this.timerDelay > 0) {			      |	        if (this.delayTimer > 0) {
            this.timerDelay -= 1;			      |	            this.delayTimer -= 1;
        }							        }
        if (this.timerSound > 0 ) {			      |	    
            this.timerSound -= 1;   			      |	        if (this.soundTimer > 0) {
							      >	            this.soundTimer -= 1;
        }							        }
    }								    }

    playSound() {						    playSound() {
        if (this.soundTimer > 0) {				        if (this.soundTimer > 0) {
            this.speaker.play(440);				            this.speaker.play(440);
        } else {						        } else {
            this.speaker.stop();				            this.speaker.stop();
        }							        }
    }								    }

    executeInstruction(opcode) {				    executeInstruction(opcode) {
							      >	        // Increment the program counter to prepare it for th
							      >	        // Each instruction is 2 bytes long, so increment it 
							      >	        this.pc += 2;
							      >
							      >	        // We only need the 2nd nibble, so grab the value of 
        let x = (opcode & 0x0F00) >> 8;				        let x = (opcode & 0x0F00) >> 8;
							      >
							      >	        // We only need the 3rd nibble, so grab the value of 
        let y = (opcode & 0x00F0) >> 4;				        let y = (opcode & 0x00F0) >> 4;

        switch (opcode & 0xF000) {				        switch (opcode & 0xF000) {
            case 0x0000:					            case 0x0000:
                switch (opcode) {				                switch (opcode) {
                    case 0x00E0:				                    case 0x00E0:
                        this.renderer.clear();			                        this.renderer.clear();
                        break;					                        break;
                    case 0x00EE:				                    case 0x00EE:
                        this.pc = this.stack.pop();		                        this.pc = this.stack.pop();
                        break;					                        break;
                }						                }
        							        
                break;						                break;
            case 0x1000:					            case 0x1000:
                this.pc = (opcode & 0x0FFF);		      |	                this.pc = (opcode & 0xFFF);
                break;						                break;
							      <
            case 0x2000:					            case 0x2000:
                this.stack.push(this.pc);			                this.stack.push(this.pc);
                this.pc = (opcode & 0x0FFF);		      |	                this.pc = (opcode & 0xFFF);
                break;						                break;
							      <
            case 0x3000:					            case 0x3000:
                if (this.registers[x] == (opcode & 0x00FF)){  |	                if (this.v[x] === (opcode & 0xFF)) {
                    this.pc += 2;				                    this.pc += 2;
                }						                }
                break;						                break;
							      <
            case 0x4000:					            case 0x4000:
                if (this.registers[x] != (opcode & 0x00FF)){  |	                if (this.v[x] !== (opcode & 0xFF)) {
                    this.pc += 2;				                    this.pc += 2;
                }						                }
                break;						                break;
							      <
            case 0x5000:					            case 0x5000:
                if (x == y){				      |	                if (this.v[x] === this.v[y]) {
                    this.pc += 2;				                    this.pc += 2;
                }						                }
                break;						                break;
							      <
            case 0x6000:					            case 0x6000:
                this.registers[x] = (opcode & 0x0FFF);	      |	                this.v[x] = (opcode & 0xFF);
                break;						                break;
							      <
            case 0x7000:					            case 0x7000:
                this.registers[x] += (opcode & 0x0FFF);	      |	                this.v[x] += (opcode & 0xFF);
							      <
                break;						                break;
                					      <
            case 0x8000:					            case 0x8000:
                switch (opcode & 0xF) {				                switch (opcode & 0xF) {
                    case 0x0:					                    case 0x0:
                        this.registers[x] = this.registers[y] |	                        this.v[x] = this.v[y];
                        break;					                        break;
                    case 0x1:					                    case 0x1:
                        this.registers[x] |= this.registers[y |	                        this.v[x] |= this.v[y]
                        break;					                        break;
                    case 0x2:					                    case 0x2:
                        this.registers[x] &= this.registers[y |	                        this.v[x] &= this.v[y];
                        break;					                        break;
                    case 0x3:					                    case 0x3:
                        this.registers[x] ^= this.registers[y |	                        this.v[x] ^= this.v[y];
                        break;					                        break;
                    case 0x4:					                    case 0x4:
                        let sum = this.registers[x] + this.re |	                        let sum = (this.v[x] += this.v[y]);
                        this.registers[0xF] = 0;	      |
							      >	                        this.v[0xF] = 0;

                        if (sum > 0xFF){		      |	                        if (sum > 0xFF) {
                            this.registers[0xF] = 1;	      |	                            this.v[0xF] = 1;
                        }					                        }
                        // Thanks to this.v being a Uint8Arra <
                        // automatically has the lower, right <
                        // stored in the array. Therefore we  <
                        // special with it.		      <
                        this.registers[x] = sum;	      <
                        break;				      <

							      >	                        this.v[x] = sum;
							      >	                        break;
                    case 0x5:					                    case 0x5:
                        this.registers[0xF] = 0;	      |	                        this.v[0xF] = 0;

                        if (this.registers[x] > this.register |	                        if (this.v[x] > this.v[y]) {
                            this.registers[0xF] = 1;	      |	                            this.v[0xF] = 1;
                        }					                        }
                        this.registers[x] = this.registers[x] <
                        break;				      <

                    case 0x6:				      |	                        this.v[x] -= this.v[y];
                        // skips an if statement!!	      <
                        this.registers[0xF] = (this.registers <
                        this.registers[x] >>= 1;	      <
                        break;					                        break;
							      >	                    case 0x6:
							      >	                        this.v[0xF] = (this.v[x] & 0x1);

							      >	                        this.v[x] >>= 1;
							      >	                        break;
                    case 0x7:					                    case 0x7:
                        this.registers[0xF] = 0;	      |	                        this.v[0xF] = 0;
                        if (this.registers[y] > this.register |
                            this.registers[0xF] = 1;          |	                        if (this.v[y] > this.v[x]) {
							      >	                            this.v[0xF] = 1;
                        }					                        }
                        this.registers[x] = this.registers[y] <
                        break;				      <

							      >	                        this.v[x] = this.v[y] - this.v[x];
							      >	                        break;
                    case 0xE:					                    case 0xE:
                        // 0x80 == 0b10000000		      |	                        this.v[0xF] = (this.v[x] & 0x80);
                        this.registers[0xF] = (this.registers |	                        this.v[x] <<= 1;
                        this.registers[x] <<= 1;	      <
                        break;					                        break;
                }						                }
        							        
                break;						                break;
            case 0x9000:					            case 0x9000:
                if (this.registers[x] != this.registers[y]){  |	                if (this.v[x] !== this.v[y]) {
                    this.pc += 2;				                    this.pc += 2;
                }						                }
                break;						                break;
							      <
            case 0xA000:					            case 0xA000:
                this.index = (opcode & 0xFFF);		      |	                this.i = (opcode & 0xFFF);
                break;						                break;
							      <
            case 0xB000:					            case 0xB000:
                this.pc = this.registers[0x0] + (opcode & 0xF |	                this.pc = (opcode & 0xFFF) + this.v[0];
                break;						                break;
							      <
            case 0xC000:					            case 0xC000:
                let rand = Math.floor(Math.random() * 0xFF);	                let rand = Math.floor(Math.random() * 0xFF);
                this.registers[x] = rand & (opcode & 0xFF)    <
                break;					      <

							      >	                this.v[x] = rand & (opcode & 0xFF);
							      >	                break;
            case 0xD000:					            case 0xD000:
                // TODO					      |	                let width = 8;
                let width   = 8;			      |	                let height = (opcode & 0xF);
                // n is the height of the sprite we want to d <
                // "n-byte" sprite. every row is a byte	      <
                let height  = (opcode & 0xF);		      <

                // set collision to 0 for now		      |	                this.v[0xF] = 0;
                this.registers[0xF] = 0;		      <

                for (let row = 0; row < height; row++){	      |	                for (let row = 0; row < height; row++) {
                    let sprite = this.memory[this.index + row |	                    let sprite = this.memory[this.i + row];

                    for ( let col = 0; col < width; col++){   |	                    for (let col = 0; col < width; col++) {
                        // if the bit (sprite) is not 0, rend |	                        // If the bit (sprite) is not 0, rend
                        if ((sprite & 0x80) > 0) {		                        if ((sprite & 0x80) > 0) {
                            // if true, that means there was  |	                            // If setPixel returns 1, which m
                            if (this.renderer.setPixel(this.r |	                            if (this.renderer.setPixel(this.v
                                this.registers[0xF] = 1	      |	                                this.v[0xF] = 1;
                            }					                            }
                        }					                        }
							      >
							      >	                        // Shift the sprite left 1. This will
							      >	                        // Ex. 10010000 << 1 will become 0010
                        sprite <<= 1;				                        sprite <<= 1;
                    }						                    }
                }						                }
                break;						                break;
							      <
            case 0xE000:					            case 0xE000:
                switch (opcode & 0xFF) {			                switch (opcode & 0xFF) {
                    case 0x9E:					                    case 0x9E:
                        if (this.keyboard.isKeyPressed(this.r |	                        if (this.keyboard.isKeyPressed(this.v
                            this.pc += 2;			                            this.pc += 2;
                        				      <
                        }					                        }
                        break;					                        break;
							      <
                    case 0xA1:					                    case 0xA1:
                        if (!this.keyboard.isKeyPressed(this. |	                        if (!this.keyboard.isKeyPressed(this.
                            this.pc += 2;			                            this.pc += 2;
                        				      <
                        }					                        }
							      <
                        break;					                        break;
                }						                }
        							        
                break;						                break;
            case 0xF000:					            case 0xF000:
                switch (opcode & 0xFF) {			                switch (opcode & 0xFF) {
                    case 0x07:					                    case 0x07:
                        this.registers[x] = this.timerDelay;  |	                        this.v[x] = this.delayTimer;
                        break;					                        break;
							      <
                    case 0x0A:					                    case 0x0A:
                        this.paused = true;			                        this.paused = true;

                        this.keyboard.onNextKeyPress = functi |	                        this.keyboard.onNextKeyPress = functi
                            this.registers[x] = key;	      |	                            this.v[x] = key;
                            this.paused = false;		                            this.paused = false;
                        }.bind(this);				                        }.bind(this);
                        break;					                        break;
							      <
                    case 0x15:					                    case 0x15:
                        this.registers[x] = this.timerDelay;  |	                        this.delayTimer = this.v[x];
                        break;					                        break;
							      <
                    case 0x18:					                    case 0x18:
                        this.registers[x] = this.soundTimer;  |	                        this.soundTimer = this.v[x];
                        break;					                        break;
							      <
                    case 0x1E:					                    case 0x1E:
                        this.index += this.registers[x];      |	                        this.i += this.v[x];
                        break;					                        break;
							      <
                    case 0x29:					                    case 0x29:
                        this.index = this.registers[x] * 5;   |	                        this.i = this.v[x] * 5;
                        break;					                        break;
							      <
                    case 0x33:					                    case 0x33:
                        let num = this.registers[x];	      |	                        // Get the hundreds digit and place i
                        this.memory[this.index]   = parseInt( |	                        this.memory[this.i] = parseInt(this.v
                        this.memory[this.index+1] = parseInt( |
                        this.memory[this.index+2] = parseInt( |	                        // Get tens digit and place it in I+1
                        break;				      |	                        // between 0 and 9.
							      >	                        this.memory[this.i + 1] = parseInt((t

							      >	                        // Get the value of the ones (last) d
							      >	                        this.memory[this.i + 2] = parseInt(th
							      >	                        break;
                    case 0x55:					                    case 0x55:
                        for (let i = 0; i<=x; i++){	      |	                        for (let registerIndex = 0; registerI
                            this.memory[this.index + i] = thi |	                            this.memory[this.i + registerInde
                        }					                        }
                        break;					                        break;
							      <
                    case 0x65:					                    case 0x65:
                        for (let i = 0; i<=x; i++){	      |	                        for (let registerIndex = 0; registerI
                            this.registers[i] = this.memory[t |	                            this.v[registerIndex] = this.memo
                        }					                        }
							      <
                        break;					                        break;
                }						                }
        							        
                break;						                break;
        							        
            default:						            default:
                throw new Error('Unknown opcode ' + opcode);	                throw new Error('Unknown opcode ' + opcode);
        }							        }
							      <
							      <
							      <
							      <
        this.pc += 2;					      <
    }								    }
}								}

export default CPU;						export default CPU;